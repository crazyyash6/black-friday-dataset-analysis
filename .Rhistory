library(gridExtra)
library(corrplot)
library(gridExtra)
library(corrplot)
library(rpart)
library(randomForest)
library(stepPlr)
library(C50)
library(C50)
library(data.table)
library(plyr)
library(dplyr)
library(GAD)
Sys.info()
memory.limit()
train_set <- read.csv("train.csv", stringsAsFactors = FALSE, header = TRUE, na.strings = c('NA',''))
view(train.csv)
train.csv<-black.fridAY(1:537577, 537577, replace = FALSE, prob = NULL)
view(black.fridAY)
train_set <- read.csv("train.csv", stringsAsFactors = FALSE, header = TRUE, na.strings = c('NA',''))
library(data.table)
library(ggplot2)
library(gridExtra)
library(corrplot)
library(rpart)
library(randomForest)
library(stepPlr)
library(C50)
library(plyr)
library(MASS)
library(caret)
library(caretEnsemble)
library(dplyr)
blackf_data <- fread("black.fridAy.csv")
blackf_data <- fread("blackfriday.csv")
blackf_data <- fread("blackfriday.csv")
object.size(blackf_data)
dim(blackf_data)
head(blackf_data, 10)
str(blackf_data)
plot_str(blackf_data)
sapply(blackf_data, function(x) sum(is.na(x)))
plot_missing(blackf_data)
prop.table(table(blackf_data$Marital_Status))
plot_histogram(blackf_data)
install.packages("xda")
train.csv<-blackfriday(1:537577, 537577, replace = FALSE, prob = NULL)
train.csv<-sample(1:537577, 537577, replace = FALSE, prob = NULL)
view(train.csv)
train_set <- read.csv("train.csv", stringsAsFactors = FALSE, header = TRUE, na.strings = c('NA',''))
write.csv(MyData, file = "train.csv",row.names=FALSE, na="")
write.csv(train, file = "train.csv",row.names=FALSE, na="")
write.csv(train.csv, file = "train.csv",row.names=FALSE, na="")
view(iris)
iris
iris <- datasets::iris
iris2 <- iris[,-5]
species_labels <- iris[,5]
library(colorspace) # get nice colors
species_col <- rev(rainbow_hcl(3))[as.numeric(species_labels)]
# Plot a SPLOM:
pairs(iris2, col = species_col,
lower.panel = NULL,
cex.labels=2, pch=19, cex = 1.2)
# Add a legend
par(xpd = TRUE)
legend(x = 0.05, y = 0.4, cex = 2,
legend = as.character(levels(species_labels)),
fill = unique(species_col))
par(xpd = NA)
d_iris <- dist(iris2) # method="man" # is a bit better
hc_iris <- hclust(d_iris, method = "complete")
iris_species <- rev(levels(iris[,5]))
library(dendextend)
dend <- as.dendrogram(hc_iris)
# order it the closest we can to the order of the observations:
dend <- rotate(dend, 1:150)
# Color the branches based on the clusters:
dend <- color_branches(dend, k=3) #, groupLabels=iris_species)
# Manually match the labels, as much as possible, to the real classification of the flowers:
labels_colors(dend) <-
rainbow_hcl(3)[sort_levels_values(
as.numeric(iris[,5])[order.dendrogram(dend)]
)]
# We shall add the flower type to the labels:
labels(dend) <- paste(as.character(iris[,5])[order.dendrogram(dend)],
"(",labels(dend),")",
sep = "")
# We hang the dendrogram a bit:
dend <- hang.dendrogram(dend,hang_height=0.1)
# reduce the size of the labels:
# dend <- assign_values_to_leaves_nodePar(dend, 0.5, "lab.cex")
dend <- set(dend, "labels_cex", 0.5)
# And plot:
par(mar = c(3,3,3,7))
plot(dend,
main = "Clustered Iris data set
(the labels give the true flower species)",
horiz =  TRUE,  nodePar = list(cex = .007))
legend("topleft", legend = iris_species, fill = rainbow_hcl(3))
install.packages("dendextend")
d_iris <- dist(iris2) # method="man" # is a bit better
hc_iris <- hclust(d_iris, method = "complete")
iris_species <- rev(levels(iris[,5]))
library(dendextend)
dend <- as.dendrogram(hc_iris)
# order it the closest we can to the order of the observations:
dend <- rotate(dend, 1:150)
# Color the branches based on the clusters:
dend <- color_branches(dend, k=3) #, groupLabels=iris_species)
# Manually match the labels, as much as possible, to the real classification of the flowers:
labels_colors(dend) <-
rainbow_hcl(3)[sort_levels_values(
as.numeric(iris[,5])[order.dendrogram(dend)]
)]
# We shall add the flower type to the labels:
labels(dend) <- paste(as.character(iris[,5])[order.dendrogram(dend)],
"(",labels(dend),")",
sep = "")
# We hang the dendrogram a bit:
dend <- hang.dendrogram(dend,hang_height=0.1)
# reduce the size of the labels:
# dend <- assign_values_to_leaves_nodePar(dend, 0.5, "lab.cex")
dend <- set(dend, "labels_cex", 0.5)
# And plot:
par(mar = c(3,3,3,7))
plot(dend,
main = "Clustered Iris data set
(the labels give the true flower species)",
horiz =  TRUE,  nodePar = list(cex = .007))
legend("topleft", legend = iris_species, fill = rainbow_hcl(3))
d_iris <- dist(iris2) # method="man" # is a bit better
hc_iris <- hclust(d_iris, method = "complete")
iris_species <- rev(levels(iris[,5]))
library(dendextend)
dend <- as.dendrogram(hc_iris)
# order it the closest we can to the order of the observations:
dend <- rotate(dend, 1:150)
# Color the branches based on the clusters:
dend <- color_branches(dend, k=3) #, groupLabels=iris_species)
# Manually match the labels, as much as possible, to the real classification of the flowers:
labels_colors(dend) <-
rainbow_hcl(3)[sort_levels_values(
as.numeric(iris[,5])[order.dendrogram(dend)]
)]
# We shall add the flower type to the labels:
labels(dend) <- paste(as.character(iris[,5])[order.dendrogram(dend)],
"(",labels(dend),")",
sep = "")
# We hang the dendrogram a bit:
dend <- hang.dendrogram(dend,hang_height=0.1)
# reduce the size of the labels:
# dend <- assign_values_to_leaves_nodePar(dend, 0.5, "lab.cex")
dend <- set(dend, "labels_cex", 0.5)
# And plot:
par(mar = c(3,3,3,7))
plot(dend,
main = "Clustered Iris data set
(the labels give the true flower species)",
horiz =  TRUE,  nodePar = list(cex = .007))
legend("topleft", legend = iris_species, fill = rainbow_hcl(3))
pairs(iris2, col = species_col,
lower.panel = NULL,
cex.labels=2, pch=19, cex = 1.2)
# Add a legend
par(xpd = TRUE)
legend(x = 0.05, y = 0.4, cex = 2,
legend = as.character(levels(species_labels)),
fill = unique(species_col))
par(xpd = NA)
library(data.table)
library(DataExplorer) # For initial exploratory data analysis
library(dplyr) # For data manipulation
library(xda) # For Exploratory data analysis
library(ggplot2)
library(vcd)
library(rpart)
install.packages("vcd")
install.packages("DataExplorer")
install.packages("xda")
view(train.csv)
object.size(blackf_data)
train_set <- read.csv("train.csv", stringsAsFactors = FALSE, header = TRUE, na.strings = c('NA',''))
test_set<- read.csv("test.csv",  stringsAsFactors = FALSE, header = TRUE, na.strings = c('NA',''))
str(train_set)
str(test_set)
plot_str(blackf_data)
sapply(train_set, function(x) sum(is.na(x)))
sapply(test_set, function(x) sum(is.na(x)))
ggplot(new_data, aes(Product_Cat_1_Avg, Avg_Purchase_Amount, color = Age)) + geom_point() + facet_wrap(~ Age) +
labs(title = "Product_Cat_1_Avg Vs Avg_Purchase_Amount")
# Product Category 2:
ggplot(new_data, aes(Product_Cat_2_Avg, Avg_Purchase_Amount, color = Age)) + geom_point() + facet_wrap(~ Age) +
labs(title = "Product_Cat_2_Avg Vs Avg_Purchase_Amount")
# Product Category 3:
ggplot(new_data, aes(Product_Cat_3_Avg, Avg_Purchase_Amount, color = Age)) + geom_point() + facet_wrap(~ Age) +
labs(title = "Product_Cat_3_Avg Vs Avg_Purchase_Amount")
train_set$User_ID <- as.factor(train_set$User_ID)
train_set$Product_ID <- as.factor(train_set$Product_ID)
train_set$Marital_Status <- as.factor(ifelse(train_set$Marital_Status == 1, 'Married', 'Single'))
train_set$Age <- as.factor(train_set$Age)
train_set$Gender <- as.factor(ifelse(train_set$Gender=='M', 'Male', 'Female'))
train_set$Occupation <- as.factor(train_set$Occupation)
train_set$City_Category <- as.factor(train_set$City_Category)
train_set$Stay_In_Current_City_Years <- as.factor(train_set$Stay_In_Current_City_Years)
test_set$User_ID <- as.factor(test_set$User_ID)
test_set$Product_ID <- as.factor(test_set$Product_ID)
test_set$Marital_Status <- as.factor(ifelse(test_set$Marital_Status == 1, 'Married', 'Single'))
test_set$Age <- as.factor(test_set$Age)
test_set$Gender <- as.factor(ifelse(test_set$Gender=='M', 'Male', 'Female'))
test_set$Occupation <- as.factor(test_set$Occupation)
test_set$City_Category <- as.factor(test_set$City_Category)
test_set$Stay_In_Current_City_Years <- as.factor(test_set$Stay_In_Current_City_Years)
#str(train_set)
#str(test_set)
EDA_Distinct <- distinct(train_set, User_ID, Age, Gender, Marital_Status, Occupation, City_Category, Stay_In_Current_City_Years)
#str(EDA_Distinct)
head(EDA_Distinct)
library(data.table)
library(ggplot2)
library(gridExtra)
library(corrplot)
library(rpart)
library(randomForest)
library(stepPlr)
library(C50)
library(plyr)
library(MASS)
library(caret)
library(caretEnsemble)
library(dplyr)
train_set <- read.csv("train.csv", stringsAsFactors = FALSE, header = TRUE, na.strings = c('NA',''))
test_set<- read.csv("test.csv",  stringsAsFactors = FALSE, header = TRUE, na.strings = c('NA',''))
str(train_set)
sapply(train_set, function(x) sum(is.na(x)))
str(test_set)
#loading the packages
library(data.table)
library(ggplot2)
library(gridExtra)
library(corrplot)
library(rpart)
library(randomForest)
library(stepPlr)
library(C50)
library(plyr)
library(MASS)
library(caret)
library(caretEnsemble)
library(dplyr)
#checking memory limit
memory.limit()
#loading the data
train_set <- read.csv("train.csv", stringsAsFactors = FALSE, header = TRUE, na.strings = c('NA',''))
test_set<- read.csv("test.csv",  stringsAsFactors = FALSE, header = TRUE, na.strings = c('NA',''))
#Checking the structure of the dataset which is loaded.
str(train_set)
str(test_set)
# checking missing data of train and test data
sapply(train_set, function(x) sum(is.na(x)))
sapply(test_set, function(x) sum(is.na(x)))
# Exploratory data analysis
#Since our data is stored based on product id i.e. if a person buying 10 products then his data will be stored in 10 observation and hence there will cause a repetition of same person data.
train_set$User_ID <- as.factor(train_set$User_ID)
train_set$Product_ID <- as.factor(train_set$Product_ID)
train_set$Marital_Status <- as.factor(ifelse(train_set$Marital_Status == 1, 'Married', 'Single'))
train_set$Age <- as.factor(train_set$Age)
train_set$Gender <- as.factor(ifelse(train_set$Gender=='M', 'Male', 'Female'))
train_set$Occupation <- as.factor(train_set$Occupation)
train_set$City_Category <- as.factor(train_set$City_Category)
train_set$Stay_In_Current_City_Years <- as.factor(train_set$Stay_In_Current_City_Years)
test_set$User_ID <- as.factor(test_set$User_ID)
test_set$Product_ID <- as.factor(test_set$Product_ID)
test_set$Marital_Status <- as.factor(ifelse(test_set$Marital_Status == 1, 'Married', 'Single'))
test_set$Age <- as.factor(test_set$Age)
test_set$Gender <- as.factor(ifelse(test_set$Gender=='M', 'Male', 'Female'))
test_set$Occupation <- as.factor(test_set$Occupation)
test_set$City_Category <- as.factor(test_set$City_Category)
test_set$Stay_In_Current_City_Years <- as.factor(test_set$Stay_In_Current_City_Years)
#str(train_set)
#str(test_set)
EDA_Distinct <- distinct(train_set, User_ID, Age, Gender, Marital_Status, Occupation, City_Category, Stay_In_Current_City_Years)
#str(EDA_Distinct)
head(EDA_Distinct)
head(train_set$User_ID,40)
head(test_set$User_ID,40)
#Here checking if the all user_id refer to other person or the same person
#creating a new data frame to stor the number of purchase made by each user
userIDCount <- as.data.frame(table(train_set$User_ID))
names(userIDCount) <- c("User_ID","User_Purchase_Count")
head(userIDCount)
# joining i.e. storing the user purchase count in original data frame
#By using the merge function and its optional parameters:
#Inner join: merge(df1, df2) will work for these examples because R automatically joins the frames by common variable names, but you would most likely want to specify merge(df1, df2, by = "CustomerId") to make sure that you were matching on only the fields you desired. You can also use the by.x and by.y parameters if the matching variables have different names in the different data frames.
#Outer join: merge(x = df1, y = df2, by = "CustomerId", all = TRUE)
#Left outer: merge(x = df1, y = df2, by = "CustomerId", all.x = TRUE)
#Right outer: merge(x = df1, y = df2, by = "CustomerId", all.y = TRUE)
#Cross join: merge(x = df1, y = df2, by = NULL)
train_set <- merge(x = train_set, y = userIDCount, by = "User_ID", all.x = TRUE)
str(train_set)
test_set <- merge(x = test_set, y = userIDCount, by = "User_ID", all.x = TRUE)
#Now we can remove the UserIDCount dataframe
rm(userIDCount)
'%!in%' <- function(x,y)!('%in%'(x,y))
#if(test_set$User_ID %!in% train_set$User_ID){ assign(test_set$userIDCount, 0)}
test_set[is.na(test_set$User_Purchase_Count), "User_Purchase_Count"] <- 1
class(test_set$User_Purchase_Count)
## [1] "numeric"
str(test_set)
test_set$User_Purchase_Count <- as.integer(test_set$User_Purchase_Count)
#Updating EDA_Distinct dataframe
EDA_Distinct <- distinct(train_set, User_ID, Age, Gender, Marital_Status, Occupation, City_Category, Stay_In_Current_City_Years, User_Purchase_Count)
#Updating EDA_Distinct dataframe
EDA_Distinct <- distinct(train_set, User_ID, Age, Gender, Marital_Status, Occupation, City_Category, Stay_In_Current_City_Years, User_Purchase_Count)
d1 <- summary(EDA_Distinct$User_Purchase_Count)
p1 <- ggplot(EDA_Distinct, aes(x=User_Purchase_Count)) +geom_density(fill="red", col="black", alpha=0.80) + annotate(geom = "text", x = 6, y = 0.0125, label = "Min")  + annotate(geom = "text", x = 24, y = 0.013, label = "1st Qu.") + annotate(geom = "text", x = 50, y = 0.0125, label = "Median") + annotate(geom = "text", x = 90, y = 0.013, label = "Mean") + annotate(geom = "text", x = 112, y = 0.0125, label = "3rd Qu.") + annotate(geom = "text", x = 1015, y = 0.0125, label = "Max") + geom_vline(xintercept = c(6, 26, 54, 93.37, 117, 1026), size = 0.2, col = 'black') #+ lims(x = )
p2 <- ggplot(EDA_Distinct, aes(x=User_Purchase_Count)) +geom_histogram(fill="red", col="black", alpha=0.80)
p3 <- ggplot(EDA_Distinct,aes(x= Age,y=User_Purchase_Count, fill=Age)) + geom_boxplot() + facet_grid(Gender~Marital_Status) + labs(x="Age",y="Customer Purchase Count")
p4 <- ggplot(EDA_Distinct,aes(x= Occupation,y=User_Purchase_Count, fill=Occupation)) + geom_boxplot() + facet_grid(Gender~Marital_Status) + labs(x="Occupation",y="Customer Purchase Count")
p5 <- ggplot(EDA_Distinct,aes(x=Age,y=User_Purchase_Count,fill=Stay_In_Current_City_Years))+geom_boxplot()+facet_grid(City_Category~ Stay_In_Current_City_Years) + labs(x="Age",y="Customer Purchase Count")
p5i <- ggplot(EDA_Distinct,aes(x=Age,y=User_Purchase_Count,fill=Stay_In_Current_City_Years))+geom_boxplot()+facet_grid( Stay_In_Current_City_Years ~ City_Category) + labs(x="Age",y="Customer Purchase Count")
p6 <- ggplot(EDA_Distinct,aes(x=Age,y=User_Purchase_Count,fill=Marital_Status))+geom_boxplot()+facet_grid(Gender~City_Category) + scale_fill_manual(values=c("tan4","limegreen"))  + labs(x="Age",y="Customer Purchase Count")
#grid.arrange(p1, p2, p3, p4 ,p5i ,p6, ncol = 1, nrow = 6);
d1;p1;p2;p3;p4;p5;p5i;p6
Online.Retail <- read.csv("U:/Users/737345/Downloads/Online Retail.csv")
View(Online.Retail)
salesData$Amount <- salesData$Quantity*salesData$UnitPrice
str(Online Retail)
UK.OnlineRetail.df <- read_xlsx("Online Retail.csv")
UK.OnlineRetail.df <- read.csv(OnlineRetail.csv)
UK.OnlineRetail.df <- read.csv("Online Retail.csv")
library(data.table)
library(ggplot2)
library(gridExtra)
library(corrplot)
library(rpart)
library(randomForest)
library(stepPlr)
library(C50)
library(plyr)
library(MASS)
library(caret)
library(caretEnsemble)
library(dplyr)
library(data.table)
library(ggplot2)
library(gridExtra)
library(corrplot)
library(rpart)
library(randomForest)
library(stepPlr)
library(C50)
library(plyr)
library(MASS)
library(caret)
library(caretEnsemble)
library(dplyr)
train_set <- read.csv("train.csv", stringsAsFactors = FALSE, header = TRUE, na.strings = c('NA',''))
test_set<- read.csv("test.csv",  stringsAsFactors = FALSE, header = TRUE, na.strings = c('NA',''))
memory.limit()
Sys.info()
str(train_set)
sapply(train_set, function(x) sum(is.na(x)))
str(test_set)
sapply(test_set, function(x) sum(is.na(x)))
train_set$User_ID <- as.factor(train_set$User_ID)
train_set$Product_ID <- as.factor(train_set$Product_ID)
train_set$Marital_Status <- as.factor(ifelse(train_set$Marital_Status == 1, 'Married', 'Single'))
train_set$Age <- as.factor(train_set$Age)
train_set$Gender <- as.factor(ifelse(train_set$Gender=='M', 'Male', 'Female'))
train_set$Occupation <- as.factor(train_set$Occupation)
train_set$City_Category <- as.factor(train_set$City_Category)
train_set$Stay_In_Current_City_Years <- as.factor(train_set$Stay_In_Current_City_Years)
test_set$User_ID <- as.factor(test_set$User_ID)
test_set$Product_ID <- as.factor(test_set$Product_ID)
test_set$Marital_Status <- as.factor(ifelse(test_set$Marital_Status == 1, 'Married', 'Single'))
test_set$Age <- as.factor(test_set$Age)
test_set$Gender <- as.factor(ifelse(test_set$Gender=='M', 'Male', 'Female'))
test_set$Occupation <- as.factor(test_set$Occupation)
test_set$City_Category <- as.factor(test_set$City_Category)
test_set$Stay_In_Current_City_Years <- as.factor(test_set$Stay_In_Current_City_Years)
EDA_Distinct <- distinct(train_set, User_ID, Age, Gender, Marital_Status, Occupation, City_Category, Stay_In_Current_City_Years)
head(EDA_Distinct)
head(train_set$User_ID,40)
head(test_set$User_ID,40)
userIDCount <- as.data.frame(table(train_set$User_ID))
names(userIDCount) <- c("User_ID","User_Purchase_Count")
head(userIDCount)
train_set <- merge(x = train_set, y = userIDCount, by = "User_ID", all.x = TRUE)
str(train_set)
test_set <- merge(x = test_set, y = userIDCount, by = "User_ID", all.x = TRUE)
rm(userIDCount)
'%!in%' <- function(x,y)!('%in%'(x,y))
test_set[is.na(test_set$User_Purchase_Count), "User_Purchase_Count"] <- 1
class(test_set$User_Purchase_Count)
str(test_set)
test_set$User_Purchase_Count <- as.integer(test_set$User_Purchase_Count)
totspend <- aggregate(train_set$Purchase, by=list(Category=train_set$User_ID), FUN=sum)
names(totspend) <- c("User_ID","Total_Spending")
head(totspend)
summary(totspend$Total_Spending)
ggplot(totspend, aes(x=Total_Spending)) + geom_density(fill="red", col="black", alpha=0.80)
rm(totspend)
EDA_Distinct <- distinct(train_set, User_ID, Age, Gender, Marital_Status, Occupation, City_Category, Stay_In_Current_City_Years, User_Purchase_Count)
d1 <- summary(EDA_Distinct$User_Purchase_Count)
p1 <- ggplot(EDA_Distinct, aes(x=User_Purchase_Count)) + geom_density(fill="red", col="black", alpha=0.80) + annotate(geom = "text", x = 6, y = 0.0125, label = "Min")  + annotate(geom = "text", x = 24, y = 0.013, label = "1st Qu.") + annotate(geom = "text", x = 50, y = 0.0125, label = "Median") + annotate(geom = "text", x = 90, y = 0.013, label = "Mean") + annotate(geom = "text", x = 112, y = 0.0125, label = "3rd Qu.") + annotate(geom = "text", x = 1015, y = 0.0125, label = "Max") + geom_vline(xintercept = c(6, 26, 54, 93.37, 117, 1026), size = 0.2, col = 'black') #+ lims(x = )
p2 <- ggplot(EDA_Distinct, aes(x=User_Purchase_Count)) +geom_histogram(fill="red", col="black", alpha=0.80)
p3 <- ggplot(EDA_Distinct,aes(x= Age,y=User_Purchase_Count, fill=Age)) + geom_boxplot() + facet_grid(Gender~Marital_Status) + labs(x="Age",y="Customer Purchase Count")
p4 <- ggplot(EDA_Distinct,aes(x= Occupation,y=User_Purchase_Count, fill=Occupation)) + geom_boxplot() + facet_grid(Gender~Marital_Status) + labs(x="Occupation",y="Customer Purchase Count")
p5 <- ggplot(EDA_Distinct,aes(x=Age,y=User_Purchase_Count,fill=Stay_In_Current_City_Years))+geom_boxplot()+facet_grid(City_Category~ Stay_In_Current_City_Years) + labs(x="Age",y="Customer Purchase Count")
p5i <- ggplot(EDA_Distinct,aes(x=Age,y=User_Purchase_Count,fill=Stay_In_Current_City_Years))+geom_boxplot()+facet_grid( Stay_In_Current_City_Years ~ City_Category) + labs(x="Age",y="Customer Purchase Count")
p6 <- ggplot(EDA_Distinct,aes(x=Age,y=User_Purchase_Count,fill=Marital_Status))+geom_boxplot()+facet_grid(Gender~City_Category) + scale_fill_manual(values=c("tan4","limegreen"))  + labs(x="Age",y="Customer Purchase Count")
d1;p1;p2;p3;p4;p5;p5i;p6
head(train_set$Product_ID,15)
SoldProdCount <- as.data.frame(table(train_set$Product_ID))
names(SoldProdCount) <- c("Product_ID","Product_Sold_Count")
SoldProdPriceMean <- aggregate(train_set$Purchase, by=list(Category=train_set$Product_ID), FUN=mean)
names(SoldProdPriceMean) <- c("Product_ID","Product_Mean_Price")
SoldProdPriceSD <- aggregate(train_set$Purchase, by=list(Category=train_set$Product_ID), FUN=sd)
names(SoldProdPriceSD) <- c("Product_ID","Product_SD_Price")
str(SoldProdCount); str(SoldProdPriceMean); str(SoldProdPriceSD)
ProductData <- as.data.frame(train_set$Product_ID)
colnames(ProductData) <- c("Product_ID")
# joining i.e. storing the Product sold count in original data frame
ProductData <- merge(x = ProductData, y = SoldProdCount, by = "Product_ID", all.x = TRUE)
ProductData <- merge(x = ProductData, y = SoldProdPriceMean, by = "Product_ID", all.x = TRUE)
ProductData <- merge(x = ProductData, y = SoldProdPriceSD, by = "Product_ID", all.x = TRUE)
ProductData$Product_Sold_Count <- as.integer(ProductData$Product_Sold_Count)
ProductData$Product_Mean_Price <- as.integer(ProductData$Product_Mean_Price)
ProductData$Product_SD_Price <- as.integer(ProductData$Product_SD_Price)
str(ProductData)
train_set <- merge(x = train_set, y = SoldProdCount, by = "Product_ID", all.x = TRUE)
d2 <- summary(ProductData$Product_Sold_Count)
p7 <- ggplot(ProductData, aes(x=Product_Sold_Count)) +geom_density(fill="red", col="black", alpha=0.80) + annotate(geom = "text", x = 1, y = 0.0017, label = "Min")  + annotate(geom = "text", x = 174, y = 0.0017, label = "1st Qu.") + annotate(geom = "text", x = 357, y = 0.0017, label = "Median") + annotate(geom = "text", x = 450, y = 0.0017, label = "Mean") + annotate(geom = "text", x = 620, y = 0.0017, label = "3rd Qu.") + annotate(geom = "text", x = 1880, y = 0.0017, label = "Max") + geom_vline(xintercept = c(1,174,357,450.5,620,1880), size = 0.2, col = 'black')
d2e <- summary(ProductData$Product_Mean_Price)
p7e <- ggplot(ProductData, aes(x=Product_Mean_Price)) +geom_density(fill="red", col="black", alpha=0.80) + annotate(geom = "text", x = 30, y = 0.0017, label = "Min")  + annotate(geom = "text", x = 6340, y = 0.0017, label = "1st Qu.") + annotate(geom = "text", x = 7750, y = 0.0017, label = "Median") + annotate(geom = "text", x = 9245, y = 0.0017, label = "Mean") + annotate(geom = "text", x = 12950, y = 0.0017, label = "3rd Qu.") + annotate(geom = "text", x = 21240, y = 0.0017, label = "Max") + geom_vline(xintercept = c(36, 6372, 7785, 9263, 12970, 21260), size = 0.2, col = 'black')
d2ee <- summary(ProductData$Product_SD_Price)
p7ee <- ggplot(ProductData, aes(x=Product_SD_Price)) +geom_density(fill="red", col="black", alpha=0.80) + annotate(geom = "text", x = 5, y = 0.00105, label = "Min")  + annotate(geom = "text", x = 1620, y = 0.00105, label = "1st Qu.") + annotate(geom = "text", x = 1968, y = 0.00105, label = "Median") + annotate(geom = "text", x = 2410, y = 0.00105, label = "Mean") + annotate(geom = "text", x = 3450, y = 0.00105, label = "3rd Qu.") + annotate(geom = "text", x = 8950, y = 0.00105, label = "Max") + geom_vline(xintercept = c(11, 1642, 1978, 2433, 3470, 8970), size = 0.2, col = 'black')
d2;p7; d2e; p7e;d2ee; p7ee
head(ProductData[order(-ProductData$Product_Sold_Count),])
tail(ProductData[order(-ProductData$Product_Sold_Count),])
test_set <- merge(x = test_set, y = SoldProdCount, by = "Product_ID", all.x = TRUE)
rm(SoldProdCount, SoldProdPriceMean, SoldProdPriceSD, ProductData)
test_set[is.na(test_set$Product_Sold_Count), "Product_Sold_Count"] <- 0
test_set$Product_Sold_Count <- as.integer(test_set$Product_Sold_Count)
head(train_set$Gender); head(train_set$Marital_Status)
d3 <- table(EDA_Distinct$Gender, EDA_Distinct$Marital_Status)
p8 <- ggplot(EDA_Distinct, aes(x=Gender, fill= Marital_Status)) + geom_bar(position = "dodge") + ggtitle("") +  labs(x="Gender",y="No. of distinct Sales") + annotate(geom = "text", x = 0.775, y = 619, label = "719")   + annotate(geom = "text", x = 1.225, y = 847, label = "947") + annotate(geom = "text", x = 1.775, y = 1655, label = "1755") + annotate(geom = "text", x = 2.225, y = 2370, label = "2470") + scale_fill_manual(values=c("tan4","limegreen"))
d3; p8
head(train_set, 10)
d4 <- table(EDA_Distinct$Age)
p9 <- ggplot(EDA_Distinct, aes(x=Age)) + geom_bar(fill=rainbow(7), col="black") + ggtitle("") +  labs(x="Age Group",y="No. of distinct buyer") + annotate(geom = "text", x = 1, y = 168, label = "218") + annotate(geom = "text", x = 2, y = 1019, label = "1069") + annotate(geom = "text", x = 3, y = 2000, label = "2053") + annotate(geom = "text", x = 4, y = 1117, label = "1167") + annotate(geom = "text", x = 5, y = 481, label = "531") + annotate(geom = "text", x = 6, y = 431, label = "481") + annotate(geom = "text", x = 7, y = 322, label = "372")
d5 <- table(EDA_Distinct$Marital_Status, EDA_Distinct$Gender, EDA_Distinct$Age)
p10 <- ggplot(EDA_Distinct, aes(x= Age,fill= Gender, col= Marital_Status)) + geom_bar(position = "dodge", size=1.25) +  labs(x="Age Group",y="No. of distinct buyer") + scale_fill_manual(values=c("hotpink", "royalblue")) + scale_color_manual(values=c("tan4","limegreen")) + ggtitle("")
p11 <- ggplot(EDA_Distinct,aes(x=Age,fill=Marital_Status))+geom_bar(position = "dodge")+facet_grid(Gender~.) + scale_fill_manual(values=c("tan4","limegreen"))
d4; p9; d5; p10; p11
head(train_set$Occupation, 10)
d6 <- table(EDA_Distinct$Occupation)
d7 <- table(EDA_Distinct$Gender, EDA_Distinct$Occupation)
p12 <- ggplot(EDA_Distinct, aes(x=Occupation, fill=Gender)) + geom_bar( col="black") + ggtitle("") +  labs(x="Occupation",y="No. of distinct people") + scale_fill_manual(values=c("hotpink", "royalblue"))
d8 <- table(EDA_Distinct$Marital_Status, EDA_Distinct$Occupation)
p13 <- ggplot(EDA_Distinct, aes(x=Occupation, fill=Marital_Status)) + geom_bar( col="black") + ggtitle("") +  labs(x="Occupation",y="No. of distinct people") + scale_fill_manual(values=c("tan4","limegreen"))
p14 <- ggplot(EDA_Distinct,aes(x=Occupation, fill=Age))+geom_bar()+facet_grid(Gender~Marital_Status)
d6; d7; p12; d8; p13; p14
head(train_set$Stay_In_Current_City_Years, 10); head(train_set$City_Category, 10)
d9 <- table(EDA_Distinct$City_Category, EDA_Distinct$Stay_In_Current_City_Years)
p15 <- ggplot(EDA_Distinct, aes(x=Stay_In_Current_City_Years, fill=City_Category)) + geom_bar( col="black") + ggtitle("") +  labs(x="Stay in Current City (Years)",y="No. of distinct people")
p16 <- ggplot(EDA_Distinct,aes(City_Category,fill=Age))+geom_bar()
p17 <- ggplot(EDA_Distinct,aes(x=Age,fill=Stay_In_Current_City_Years))+geom_bar()+facet_grid(City_Category~ Stay_In_Current_City_Years)
p18 <- ggplot(EDA_Distinct,aes(x=Age,fill=Marital_Status))+geom_bar()+facet_grid(Gender~City_Category) + scale_fill_manual(values=c("tan4","limegreen"))
d9; p15; p16; p17; p18
head(as.factor(train_set$Product_Category_1))
head(as.factor(train_set$Product_Category_2))
head(as.factor(train_set$Product_Category_3))
train_set$Product_Category_1 <- as.factor(train_set$Product_Category_1)
train_set$Product_Category_2 <- as.factor(train_set$Product_Category_2)
train_set$Product_Category_3 <- as.factor(train_set$Product_Category_3)
train_set$Product_Category_2 <- factor(train_set$Product_Category_2, levels=c(levels(train_set$Product_Category_2), "0"))
train_set[is.na(train_set$Product_Category_2), "Product_Category_2"] <-"0"
train_set$Product_Category_3 <- factor(train_set$Product_Category_3, levels=c(levels(train_set$Product_Category_3), "0"))
train_set[is.na(train_set$Product_Category_3), "Product_Category_3"] <-"0"
train_set$Cat_1 <- as.factor(ifelse((train_set$Product_Category_1=='1' | train_set$Product_Category_2=='1' | train_set$Product_Category_3=='1'), 1,0))
for(i in 2:20)
{
assign(paste("Cat_", as.character(i), sep=""),as.factor(ifelse((train_set$Product_Category_1==i | train_set$Product_Category_2==i | train_set$Product_Category_3==i), 1,0)))
}
train_set <- cbind(train_set, Cat_2, Cat_3, Cat_4, Cat_5, Cat_6, Cat_7, Cat_8, Cat_9, Cat_10, Cat_11, Cat_12, Cat_13, Cat_14, Cat_15, Cat_16, Cat_17, Cat_18, Cat_19, Cat_20)
to_drop <- c("Product_Category_1", "Product_Category_2", "Product_Category_3")
train_set <- train_set[,!names(train_set)%in% to_drop]
rm(Cat_2, Cat_3, Cat_4, Cat_5, Cat_6, Cat_7, Cat_8, Cat_9, Cat_10, Cat_11, Cat_12, Cat_13, Cat_14, Cat_15, Cat_16, Cat_17, Cat_18, Cat_19, Cat_20)
dim(train_set)
as.matrix(sapply(train_set, function(x) class(x)))
test_set$Product_Category_1 <- as.factor(test_set$Product_Category_1)
test_set$Product_Category_2 <- as.factor(test_set$Product_Category_2)
test_set$Product_Category_3 <- as.factor(test_set$Product_Category_3)
test_set$Product_Category_2 <- factor(test_set$Product_Category_2, levels=c(levels(test_set$Product_Category_2), "0"))
test_set[is.na(test_set$Product_Category_2), "Product_Category_2"] <-"0"
test_set$Product_Category_3 <- factor(test_set$Product_Category_3, levels=c(levels(test_set$Product_Category_3), "0"))
test_set[is.na(test_set$Product_Category_3), "Product_Category_3"] <-"0"
for(i in 1:20)
{
assign(paste("Cat_", as.character(i), sep=""),as.factor(ifelse((test_set$Product_Category_1==i | test_set$Product_Category_2==i | test_set$Product_Category_3==i), 1,0)))
}
test_set <- cbind(test_set, Cat_1, Cat_2, Cat_3, Cat_4, Cat_5, Cat_6, Cat_7, Cat_8, Cat_9, Cat_10, Cat_11, Cat_12, Cat_13, Cat_14, Cat_15, Cat_16, Cat_17, Cat_18, Cat_19, Cat_20)
to_drop <- c("Product_Category_1", "Product_Category_2", "Product_Category_3")
test_set <- test_set[,!names(test_set)%in% to_drop]
rm(Cat_1, Cat_2, Cat_3, Cat_4, Cat_5, Cat_6, Cat_7, Cat_8, Cat_9, Cat_10, Cat_11, Cat_12, Cat_13, Cat_14, Cat_15, Cat_16, Cat_17, Cat_18, Cat_19, Cat_20)
dim(test_set)
as.matrix(sapply(test_set, function(x) class(x)))
str(train_set); str(test_set)
sapply(train_set, function(x) sum(is.na(x))); sapply(test_set, function(x) sum(is.na(x)))
head(train_set[order(train_set$Product_ID),])
